syntax = "proto3";

package main;

import "buf/validate/validate.proto";

option go_package = "github.com/wanliqun/cgo-game-server/proto";

// The message type enum
enum MessageType {
  INFO = 0; // INFO command
  LOGIN = 1; // LOGIN command
  LOGOUT = 2; // LOGOUT command
  GENERATE_RANDOM_NICKNAME = 3; // GENERATE_RANDOM_NICKNAME command
}

// Login in

message LoginRequest {
  string username = 1 [(buf.validate.field).cel = {
    id: "username_format",
    message: "username must be 3 - 16 characters long and only conatain letters and digits",
    // `this.matches` match the string against a regex pattern, and evaluates to a bool.
    expression: "this.matches('^[A-Za-z0-9]{3,16}$')"
  }];
  string password = 2 [(buf.validate.field).string = {
    // `min_len` validates that password must have at least 3 characters.
    min_len: 1;
    // `max_len` validates that password must have at most 32 characters.
    max_len: 32;
  }];
}

message LoginResponse { }

// Log out

message LogoutRequest {}

message LogoutResponse { }

// Info

message InfoRequest {}

message InfoResponse {
  string server_name = 1; // server name
  int32 online_players = 2; // number of online players
  int32 tcp_connections = 3; // number of TCP connections
  int32 udp_connections = 4; // number of UDP connections
  int32 max_player_capacity = 5; // max player capacity
  int32 max_connection_capacity = 6; // max connection capacity
  map<string, string> metrics = 7; // metrics status as key-value pairs
}

// Generate random nickname

message GenerateRandomNicknameRequest {
  int32 sex = 1; // Sex
  int32 culture = 2; // Culture
}

message GenerateRandomNicknameResponse {
  string nickname = 1; // Nickname
}

// Message for encapsulating different request types
message Request {
  oneof body {
    InfoRequest info = 1;
    LoginRequest login = 2;
    LogoutRequest logout = 3;
    GenerateRandomNicknameRequest generate_random_nickname = 4;
  }
}

// Message for conveying response status information
message Status {
  int32 code = 1; // Status code
  string message = 2; // Descriptive message
}

// Message for encapsulating different response types
message Response {
  oneof body {
    Status status = 1;
    InfoResponse info = 2;
    LoginResponse login = 3;
    LogoutResponse logout = 4;
    GenerateRandomNicknameResponse generate_random_nickname = 5;
  }
}

// Message for encapsulating protocol message
message Message {
  MessageType type = 1;
  oneof body {
    Request request = 2;
    Response response = 3;
  }
}
